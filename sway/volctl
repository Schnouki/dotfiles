#!/usr/bin/env -S uv run --quiet --no-project --script
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "i3ipc",
#     "psutil",
#     "pulsectl-asyncio",
#     "tomli",
# ]
# ///

import argparse
import asyncio
from pathlib import Path
import tomli
from typing import Sequence

from i3ipc.aio import Connection
import psutil
import pulsectl_asyncio
from pulsectl_asyncio.pulsectl_async import PulseSinkInfo, PulseSinkInputInfo


def load_config() -> tuple[list[str], list[str]]:
    """Load sink configuration from TOML file."""
    config_path = Path("~/.config/sway/volctl.toml").expanduser()
    if not config_path.exists():
        return [], []

    with open(config_path, "rb") as f:
        config = tomli.load(f)

    return (
        config.get("sinks", {}).get("volume", []),
        config.get("sinks", {}).get("output", []),
    )


async def get_matching_sinks(
    pulse: pulsectl_asyncio.PulseAsync, patterns: Sequence[str]
) -> list[PulseSinkInfo]:
    """Get all sinks matching the given name patterns."""
    if not patterns:
        return []

    sinks = await pulse.sink_list()
    matching = []

    # Get default sink name
    server_info = await pulse.server_info()
    default_name = server_info.default_sink_name

    # First add default sink if it matches any pattern
    for sink in sinks:
        if sink.name == default_name and any(p in sink.name for p in patterns):
            matching.append(sink)
            break

    # Then add other matching sinks, sorted by name
    other_sinks = [
        s
        for s in sinks
        if s.name != default_name and any(p in s.name for p in patterns)
    ]
    matching.extend(sorted(other_sinks, key=lambda s: s.name))

    return matching


async def get_sink_by_index(
    pulse: pulsectl_asyncio.PulseAsync, patterns: Sequence[str], index: int
) -> PulseSinkInfo:
    """Get a sink by its index in the matching sinks list."""
    sinks = await get_matching_sinks(pulse, patterns)
    if not sinks:
        raise ValueError(f"No sinks found matching patterns: {patterns}")
    try:
        return sinks[index]
    except IndexError:
        raise ValueError(f"Sink index {index} out of range (0-{len(sinks) - 1})")


async def get_volume(sink: PulseSinkInfo) -> int:
    if sink.mute:
        return 0
    return round(sink.volume.value_flat * 100)


async def set_volume(
    pulse: pulsectl_asyncio.PulseAsync, sink: PulseSinkInfo, delta: int
) -> None:
    # First unmute if needed
    if sink.mute:
        await pulse.mute(sink, False)

    # Convert percentage to float and apply delta
    new_vol = sink.volume.value_flat + (delta / 100)
    # Clamp between 0 and 1
    new_vol = max(0.0, min(1.0, new_vol))
    await pulse.volume_set_all_chans(sink, new_vol)


async def toggle_mute(pulse: pulsectl_asyncio.PulseAsync, sink: PulseSinkInfo) -> None:
    await pulse.mute(sink, not sink.mute)


async def get_focused_pid() -> int | None:
    """Get the PID of the currently focused window in sway."""
    i3 = await Connection().connect()
    tree = await i3.get_tree()
    focused = tree.find_focused()
    return focused.pid if focused else None


def get_process_family_pids(pid: int) -> set[int]:
    """Get all PIDs in process hierarchy that share the same executable."""
    try:
        proc = psutil.Process(pid)
        proc_pids = {pid}
        with proc.oneshot():
            exe = proc.exe()
            for parent in proc.parents():
                with parent.oneshot():
                    if parent.exe() == exe:
                        proc_pids.add(parent.pid)
        return proc_pids
    except (psutil.NoSuchProcess, psutil.AccessDenied):
        return set()


async def find_sink_inputs_by_pid(
    pulse: pulsectl_asyncio.PulseAsync, pid: int
) -> list[PulseSinkInputInfo]:
    """Find all sink inputs by PID or one of its parents with same executable."""
    # Get all PIDs in process hierarchy
    proc_pids = get_process_family_pids(pid)
    if not proc_pids:
        return []

    # Find sink inputs
    matching_inputs = []
    sink_inputs = await pulse.sink_input_list()
    for sink_input in sink_inputs:
        if sink_input_pid := sink_input.proplist.get("application.process.id"):
            # Get all PIDs in sink input process hierarchy
            sink_input_pids = get_process_family_pids(int(sink_input_pid))
            # Check if there's an overlap between the two process hierarchies
            if proc_pids & sink_input_pids:
                matching_inputs.append(sink_input)
    return matching_inputs


async def handle_sinks_command(
    pulse: pulsectl_asyncio.PulseAsync, output_sinks_patterns: Sequence[str]
) -> None:
    """List all available sinks, highlighting those matching output patterns."""
    all_sinks = await pulse.sink_list()
    output_sinks_matched = await get_matching_sinks(pulse, output_sinks_patterns)

    # Create a map from sink index (PulseAudio) to (positional index, pattern)
    output_sinks_map = {}
    for i, sink in enumerate(output_sinks_matched):
        # Find the pattern that caused this sink to match
        # Assumes patterns are reasonably distinct or takes the first match
        pattern = next((p for p in output_sinks_patterns if p in sink.name), None)
        if pattern:  # Should always find one based on get_matching_sinks logic
            output_sinks_map[sink.index] = (i, pattern)

    for sink in sorted(all_sinks, key=lambda s: s.index):
        match_info = output_sinks_map.get(sink.index)

        if match_info:
            positional_index, pattern = match_info
            print(f"{positional_index} {sink.name}: {sink.description} [{pattern}]")
        else:
            print(f"- {sink.name}: {sink.description}")


async def handle_volume_command(
    pulse: pulsectl_asyncio.PulseAsync,
    volume_sinks: Sequence[str],
    index: int,
    command: str,
    delta: int | None,
) -> None:
    """Handle volume-related commands (get/up/down/mute)."""
    sink = await get_sink_by_index(pulse, volume_sinks, index)

    if command == "get":
        pass
    elif command == "mute":
        await toggle_mute(pulse, sink)
    elif command in ("up", "down"):
        if delta is None:
            raise ValueError("delta required for up/down commands")
        delta = delta if command == "up" else -delta
        await set_volume(pulse, sink, delta)

    # Always display current volume
    vol = await get_volume(sink)
    print(vol)


async def handle_move_between_command(
    pulse: pulsectl_asyncio.PulseAsync,
    output_sinks: Sequence[str],
    index1: int,
    index2: int,
) -> None:
    """Handle the move-between command."""
    # Get the PID of the focused window
    pid = await get_focused_pid()
    if pid is None:
        return

    # Find all matching sink inputs
    sink_inputs = await find_sink_inputs_by_pid(pulse, pid)
    if not sink_inputs:
        return

    # Get both sinks
    sink1 = await get_sink_by_index(pulse, output_sinks, index1)
    sink2 = await get_sink_by_index(pulse, output_sinks, index2)

    # Move each sink input to the appropriate sink
    for sink_input in sink_inputs:
        target_sink = sink2.index if sink_input.sink == sink1.index else sink1.index
        await pulse.sink_input_move(sink_input.index, target_sink)


async def main():
    parser = argparse.ArgumentParser(description="Control audio volume and routing")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # Volume control commands
    volume = subparsers.add_parser("volume", help="Control volume")
    volume.add_argument("index", type=int, help="Sink index (0-based)")
    volume.add_argument("action", choices=["up", "down", "mute", "get"])
    volume.add_argument("delta", type=int, nargs="?", help="Volume change in percent")

    # Move between command
    move = subparsers.add_parser(
        "move-between", help="Move focused window audio between sinks"
    )
    move.add_argument("index1", type=int, help="First sink index (0-based)")
    move.add_argument("index2", type=int, help="Second sink index (0-based)")

    # Sinks list command
    subparsers.add_parser("sinks", help="List available sinks and their mapping")

    args = parser.parse_args()

    # Load sink configuration
    volume_sinks, output_sinks = load_config()

    async with pulsectl_asyncio.PulseAsync("volctl") as pulse:
        if args.command == "volume":
            await handle_volume_command(
                pulse, volume_sinks, args.index, args.action, args.delta
            )
        elif args.command == "move-between":
            await handle_move_between_command(
                pulse, output_sinks, args.index1, args.index2
            )
        elif args.command == "sinks":
            # Pass only output_sinks patterns to the handler
            await handle_sinks_command(pulse, output_sinks)


if __name__ == "__main__":
    asyncio.run(main())

# Local Variables:
# mode: python-ts
# End:
